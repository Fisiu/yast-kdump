/**
 * File:	include/kdump/dialogs.ycp
 * Package:	Configuration of kdump
 * Summary:	Dialogs definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.com>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "kdump";

import "Popup";
import "Kdump";


    // EXAMPLE FUNCTIONS
/*
 *    void ExampleInit(string key) {
 *	y2milestone("Example Init");
 *    }
 *
 *    symbol ExampleHandle(string key, map event) {
 *	any ret = event["ID"]:nil;
 *	y2milestone("Example Handle");
 *	return nil;
 *    }
 *
 *    void ExampleStore(string key, map event) {
 *	any ret = event["ID"]:nil;
 *	y2milestone("Example Store");
 *    }
 *
 */


boolean set_network = false;

boolean set_kdump_append = false;

/**
 * map of values for "KDUMP_SAVEDIR"
 *  
 * local map <string, string >
 */
map <string, string > KDUMP_SAVE_TARGET = $[
   "target"		: "file", // ftp, ssh, nfs, cifs
   "server"		: "",
   "dir"		: "",
   "user_name"		: "", // anonymous
   "port"		: "", // deafults ftp: 21 ssh:22
   "share"		: "",
   "password"		: "", 
];


term local_filesystem = `VBox(
  `Frame(_("Local Filesystem"),`HBox(`HSpacing(1),`VBox(
    //`Left(`ComboBox(`id("local_partitions"), "&The List of Available Paritions of All Disks with Filesystem")),
    //`Left(`CheckBox(`id("enable_raw_partit"),"&Enable Save Image to Raw Partition")),
    //`Left(`ComboBox(`id("raw_partitions"), "&The List of Raw Paritions of All isks Without Filesystem")),
    `Left(`HBox(
      `TextEntry(`id("dir_save_image"), _("&Directory for Saving Dumps")),      
      `VBox ( `Label(""),
      `PushButton ( `id ("select_dir_image"), `opt ( `hstretch ),  _("B&rowse"))
    )))
    
  )))
);

/*
term network = `VBox(
  `VSpacing(1),
  `Frame(_("Network"),`HBox(`HSpacing(1),
    `RadioButtonGroup(`id("NetworkRB"), `HBox(
       `Left(`RadioButton(`id("ftp"), `opt(`notify), "F&TP")),
       `Left(`RadioButton(`id("ssh"), `opt(`notify), "&SSH (scp)")),
       `Left(`RadioButton(`id("nfs"), `opt(`notify), "N&FS")),
       `Left(`RadioButton(`id("smb"), `opt(`notify), "C&IFS (SMB)"))
    ))
  ))

);
*/

term ftp = `VBox(
  `Frame(_("FTP"),`HBox(`HSpacing(1),`VBox(
    `Left(`HBox(
      `Left(`TextEntry(`id ("server"), _("Server Nam&e"))),
      `Left(`IntField(`id ("port"), _("P&ort"), 0,65536,21)),
      `HStretch ()
    )),
    // text entry
    `Left(`TextEntry( `id("dir"), _("&Directory on Server"))),
    `Left(`CheckBox(`id ("anonymous"), `opt (`notify),_("Enable Anonymous &FTP"))),
    
    `Left(`HBox(
       // text entry
      `Left(`TextEntry(`id ("user_name"), _("&User Name"))),
      // password entry
      `Left(`Password(`id ("password"), _("&Password")))
     ))    
  )))

);

term ssh = `VBox(
  `Frame(_("SSH (scp)"),`HBox(`HSpacing(1),`VBox(
    `Left(`HBox(
      `Left(`TextEntry(`id ("server"), _("Server Nam&e"))),
      `Left(`IntField(`id ("port"), _("P&ort"), 0,65536,22)),
      `HStretch ()
    )),    
    `Left(`TextEntry( `id("dir"), _("&Directory on Server"))),
    // text entry
    `Left(`TextEntry(`id ("user_name"), _("&User Name")))   
  )))

);

term nfs = `VBox(
  `Frame(_("NFS"),`HBox(`HSpacing(1),`VBox(
    `Left(`TextEntry(`id ("server"), _("Server Nam&e"))),
     // text entry
    `Left(`TextEntry( `id("dir"), _("&Directory on Server")))  
  )))

);


term smb = `VBox(
  `Frame(_("CIFS (SMB)"),`HBox(`HSpacing(1),`VBox(
    `Left(`TextEntry(`id ("server"), _("Server Nam&e"))),
    `Left(`HBox(
      // text entries
      `Left(`TextEntry(`id ("share"), _("Exported Sha&re"))),
      `Left(`TextEntry( `id("dir"), _("&Directory on Server")))
     )),
    `Left(`CheckBox(`id ("anonymous"), `opt (`notify),_("&Use Authentication"), true)),
    `Left(`HBox(
       // text entry
      `Left(`TextEntry(`id ("user_name"), _("&User Name"))),
      // password entry
      `Left(`Password(`id ("password"), _("&Password")))
    ))
  )))

);

/**
  * Function initializes option "Enable/Disable kdump"
  */
void InitEnableDisalbeKdump (string key) {
  if (Kdump::crashkernel_param) {
     UI::ChangeWidget(`id("EnableDisalbeKdump"),`Value,"enable_kdump");

  } else {
     UI::ChangeWidget(`id("EnableDisalbeKdump"),`Value,"disable_kdump");
  }  
}

/**
  * Function stores option "Enable/Disable kdump"
  * 
  */
void StoreEnableDisalbeKdump (string key, map event) {
  string radiobut = (string) UI::QueryWidget(`id("EnableDisalbeKdump"), `Value);
  if (radiobut == "enable_kdump") {
     Kdump::crashkernel_param = true;
  } else {
     Kdump::crashkernel_param = false; 
  }

}

/**
  * Function for handling map values
  * 
  * local map <string, string > KDUMP_SAVE_TARGET
  */

boolean SetUpKDUMP_SAVE_TARGET(string target) {
 
 string parse_target = target;
 if (target != "") {
   integer pos = find(parse_target, "/");
   integer pos1 = -1;
   KDUMP_SAVE_TARGET["target"]=substring(parse_target,0,pos-1);
   parse_target = substring(parse_target,pos+2);
   if (KDUMP_SAVE_TARGET["target"]:nil == "file") {
      KDUMP_SAVE_TARGET["dir"]=parse_target;
   } else if (KDUMP_SAVE_TARGET["target"]:nil == "nfs") {
      pos = find(parse_target, "/");
      //pos1 = pos; 
      KDUMP_SAVE_TARGET["server"]=substring(parse_target,0,pos);
      //pos = find(parse_target, "/");
      //KDUMP_SAVE_TARGET["share"]=substring(parse_target,pos1+1,pos-(pos1+1));
      KDUMP_SAVE_TARGET["dir"]=substring(parse_target,pos);
   } else if (KDUMP_SAVE_TARGET["target"]:nil == "ssh") {
      pos = find(parse_target, "@");
      if (pos != -1) {
         KDUMP_SAVE_TARGET["user_name"]=substring(parse_target,0,pos);
         parse_target = substring(parse_target,pos+1);
      }
      pos1 = find(parse_target, ":");
      pos = find(parse_target, "/");
      if (pos1 !=-1) {
         KDUMP_SAVE_TARGET["server"]=substring(parse_target,0,pos1);
         KDUMP_SAVE_TARGET["port"]=substring(parse_target,pos1+1,pos-(pos1+1));
      } else {
         KDUMP_SAVE_TARGET["server"]=substring(parse_target,0,pos);
      }
      KDUMP_SAVE_TARGET["dir"]=substring(parse_target,pos);
   } else if ((KDUMP_SAVE_TARGET["target"]:nil == "ftp") 
             || (KDUMP_SAVE_TARGET["target"]:nil == "cifs")) {

      pos = find(parse_target, "@");      
      if (pos != -1) {
         string user_pas = substring(parse_target,0,pos);
         pos1 = find(user_pas, ":");
         if (pos1 != -1) {
            KDUMP_SAVE_TARGET["user_name"]=substring(parse_target,0,pos1);
            KDUMP_SAVE_TARGET["password"]=substring(parse_target,pos1+1,pos);
         } else {
            KDUMP_SAVE_TARGET["user_name"]=substring(parse_target,0,pos);
         }
         parse_target = substring(parse_target,pos+1);
      }
      if (KDUMP_SAVE_TARGET["target"]:nil == "ftp") {
         pos1 = find(parse_target, ":");
         pos = find(parse_target, "/");
         if (pos1 !=-1) {
            KDUMP_SAVE_TARGET["server"]=substring(parse_target,0,pos1);
            KDUMP_SAVE_TARGET["port"]=substring(parse_target,pos1+1,pos-(pos1+1));
         } else {
            KDUMP_SAVE_TARGET["server"]=substring(parse_target,0,pos);
         }
         KDUMP_SAVE_TARGET["dir"]=substring(parse_target,pos);         
      } else {
         pos = find(parse_target, "/"); 
         KDUMP_SAVE_TARGET["server"]=substring(parse_target,0,pos);
         parse_target = substring(parse_target,pos+1);
         pos = find(parse_target, "/");
         KDUMP_SAVE_TARGET["share"]=substring(parse_target,0,pos);
         KDUMP_SAVE_TARGET["dir"]=substring(parse_target,pos);
      }

   }


   return true;
 } else {
   return false;
 }

}


/**
  * Function initializes option "Kdump Command Line"
  * or "Kdump Command Line Append"
  */

void InitTargetKdump (string key) {

  SetUpKDUMP_SAVE_TARGET(Kdump::KDUMP_SETTINGS["KDUMP_SAVEDIR"]:nil);
  //Popup::Message(Kdump::KDUMP_SETTINGS["KDUMP_SAVEDIR"]:nil);
  //Popup::Message(KDUMP_SAVE_TARGET["target"]:nil);
  if (KDUMP_SAVE_TARGET["target"]:nil == "file") {
     UI::ChangeWidget(`id ("local_filesystem"), `Value, true);
     //UI::ReplaceWidget (`id ("Network"), `Empty());
     UI::ReplaceWidget (`id ("Targets"), local_filesystem);     
     //UI::ChangeWidget(`id("local_partitions"), `Items, Kdump::available_partitions);
     y2milestone("[kdump] (InitTargetKdump)  Kdump::available_partitions %1", Kdump::available_partitions);
     /*
     if (size(Kdump::uknown_fs_partitions)>0) {        
        UI::ChangeWidget(`id("raw_partitions"), `Items, Kdump::uknown_fs_partitions);
     } else {
        UI::ChangeWidget(`id("raw_partitions"), `Enabled, false);
        UI::ChangeWidget(`id("enable_raw_partit"), `Enabled, false);
     }*/
     UI::ChangeWidget(`id ("dir_save_image"), `Value, KDUMP_SAVE_TARGET["dir"]:nil);
  } else if (KDUMP_SAVE_TARGET["target"]:nil == "nfs") {
     //UI::ChangeWidget(`id ("network"), `Value, true);
     //UI::ReplaceWidget (`id ("Targets"), `Empty());
     //UI::ReplaceWidget (`id ("Network"), network);
     UI::ReplaceWidget (`id ("Targets"), nfs);
     UI::ChangeWidget(`id ("nfs"), `Value, true);
     UI::ChangeWidget(`id ("server"), `Value, KDUMP_SAVE_TARGET["server"]:nil);
     UI::ChangeWidget(`id ("dir"), `Value, KDUMP_SAVE_TARGET["dir"]:nil);
  } else if (KDUMP_SAVE_TARGET["target"]:nil == "ssh") {
     //UI::ChangeWidget(`id ("network"), `Value, true);
     //UI::ReplaceWidget (`id ("Targets"), `Empty());
     //UI::ReplaceWidget (`id ("Network"), network);
     UI::ReplaceWidget (`id ("Targets"), ssh);
     UI::ChangeWidget(`id ("ssh"), `Value, true);
     foreach (string key, ["server", "port", "user_name", "dir" ], {
       UI::ChangeWidget(`id (key), `Value, KDUMP_SAVE_TARGET[key]:nil);
     });
  } else if (KDUMP_SAVE_TARGET["target"]:nil == "ftp") {
     //UI::ChangeWidget(`id ("network"), `Value, true);
     //UI::ReplaceWidget (`id ("Targets"), `Empty());
     //UI::ReplaceWidget (`id ("Network"), network);
     UI::ReplaceWidget (`id ("Targets"), ftp);
     UI::ChangeWidget(`id ("ftp"), `Value, true);
     foreach (string key, ["server", "port", "dir" ], {
       UI::ChangeWidget(`id (key), `Value, KDUMP_SAVE_TARGET[key]:nil);
     });
      if (KDUMP_SAVE_TARGET["user_name"]:nil == "") {
        UI::ChangeWidget(`id ("user_name"), `Enabled, false);     
        UI::ChangeWidget(`id ("password"), `Enabled, false);
        UI::ChangeWidget(`id ("anonymous"), `Value, true);
     } else {
       UI::ChangeWidget(`id ("user_name"), `Value, KDUMP_SAVE_TARGET["user_name"]:nil);     
       UI::ChangeWidget(`id ("password"), `Value, KDUMP_SAVE_TARGET["password"]:nil);
     }
  } else if (KDUMP_SAVE_TARGET["target"]:nil == "cifs") {
     //UI::ChangeWidget(`id ("network"), `Value, true);
     //UI::ReplaceWidget (`id ("Targets"), `Empty());
     //UI::ReplaceWidget (`id ("Network"), network);
     UI::ReplaceWidget (`id ("Targets"), smb);
     UI::ChangeWidget(`id ("smb"), `Value, true);
     foreach (string key, ["server", "dir", "share", "user_name", "password"], {
       UI::ChangeWidget(`id (key), `Value, KDUMP_SAVE_TARGET[key]:nil);
     });
     
  }


}
/**
  * Function initializes option "Kdump Command Line"
  * or "Kdump Command Line Append"
  */

void InitRawPartitions (string key) {
  UI::ChangeWidget(`id("raw_partitions"), `Items, Kdump::available_partitions);

}
/**
  * Function handles "Saving Target for kdump Image"
  *
  */

symbol HandleTargetKdump (string key, map event) {
  
  any radiobutton = event["ID"]:nil;
  
  if (radiobutton == "local_filesystem") {
     //UI::ReplaceWidget (`id ("Network"), `Empty());
     UI::ReplaceWidget (`id ("Targets"), local_filesystem);
     UI::ChangeWidget(`id("local_partitions"), `Items, Kdump::available_partitions);
     if (size(Kdump::uknown_fs_partitions)>0) {        
        UI::ChangeWidget(`id("raw_partitions"), `Items, Kdump::uknown_fs_partitions);
     } else {
        UI::ChangeWidget(`id("raw_partitions"), `Enabled, false);
        UI::ChangeWidget(`id("enable_raw_partit"), `Enabled, false);
     }
     set_network = false; 
  } else if (radiobutton == "ftp") {
     UI::ReplaceWidget (`id ("Targets"), ftp);
  } else if (radiobutton == "ssh") {
     UI::ReplaceWidget (`id ("Targets"), ssh);
  } else if (radiobutton == "nfs") {
     UI::ReplaceWidget (`id ("Targets"), nfs);
  } else if (radiobutton == "smb") {
     UI::ReplaceWidget (`id ("Targets"), smb);
  }
 
  return nil;

}

/**
  * Function initializes option "Kdump Command Line"
  * or "Kdump Command Line Append"
  */

void InitSwitchKdumpComLine (string key) {
  string value = "";
  //Popup::Message("InitSwitchKdumpComLine");
  if (!set_kdump_append) {
     UI::ChangeWidget(`id("KdumpCommandLine"), `Label, "Kdump Co&mmand Line");
     UI::ChangeWidget(`id("enable_append"), `Value, false);
     value = Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"]:nil;
     UI::ChangeWidget(`id("KdumpCommandLine"), `Value, ((value == nil) ? "":value));
  } else {
     UI::ChangeWidget(`id("enable_append"), `Value, true);
     UI::ChangeWidget(`id("KdumpCommandLine"), `Label, "Kdump Co&mmand Line Append");
     value = Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"]:nil;
     UI::ChangeWidget(`id("KdumpCommandLine"), `Value, ((value == nil) ? "":value));
  }  
}



/**
  * Function handles switching between "Kdump Command Line"
  * and "Kdump Command Line Append"
  * also saves values for both options from config file
  */
symbol HandleSwitchKdumpComLine (string key, map event) {
  boolean checkbox = (boolean) UI::QueryWidget(`id("enable_append"), `Value);
  string value = "";
  //Popup::Message("HandleSwitchKdumpComLine");
  if ((checkbox) && (!set_kdump_append)) {
     set_kdump_append = true;
     Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"] = tostring(UI::QueryWidget(`id("KdumpCommandLine"), `Value));
     UI::ChangeWidget(`id("KdumpCommandLine"), `Label, "Kdump Co&mmand Line Append");
     value = Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"]:nil;
     UI::ChangeWidget(`id("KdumpCommandLine"), `Value, ((value == nil) ? "":value));
  } else if ((!checkbox)&&(set_kdump_append)){
     set_kdump_append = false;
     Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"] = tostring(UI::QueryWidget(`id("KdumpCommandLine"), `Value));
     UI::ChangeWidget(`id("KdumpCommandLine"), `Label, "Kdump Co&mmand Line");
     value = Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"]:nil;
     UI::ChangeWidget(`id("KdumpCommandLine"), `Value, ((value == nil) ? "":value));
  }

  return nil;
}


/**
  * Function stores option "Kdump Command Line"
  * or "Kdump Command Line Append"
  */
void StoreSwitchKdumpComLine (string key, map event) {
  //Popup::Message("StoreSwitchKdumpComLine");
  if (!set_kdump_append) {    
     Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"] = tostring(UI::QueryWidget(`id("KdumpCommandLine"), `Value));
  } else {
     Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"] = tostring(UI::QueryWidget(`id("KdumpCommandLine"), `Value));
  }
}


/**
  * Function initializes option "Number of Old Dumps"
  */
void InitNumberDumps (string key) {
  UI::ChangeWidget(`id("NumberDumps"), `Value, tointeger(Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"]:nil));  
}

/**
  * Function stores option "Number of Old Dumps"
  */
void StoreNumberDumps(string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"] = tostring(UI::QueryWidget(`id("NumberDumps"), `Value));
}

/**
  * Function initializes option 
  * "Enable Immediate Reboot After Saving the Core"
  */

void InitEnableReboot (string key) {
  UI::ChangeWidget(`id("EnableReboot"), `Value, ((Kdump::KDUMP_SETTINGS["KDUMP_IMMEDIATE_REBOOT"]:nil == "yes") ? true:false));  
}

/**
  * Function stores option 
  * "Enable Immediate Reboot After Saving the Core"
  */

void StoreEnableReboot(string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_IMMEDIATE_REBOOT"] = (((boolean) UI::QueryWidget(`id("EnableReboot"), `Value)) ? "yes":"no");
}



/**
  * Function initializes option 
  * "The Run-level to Boot the Kdump Kernel"
  */

void InitRunLevel (string key) {
  string value = tostring(Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"]:nil);
  switch (value) {
    case ("1"):
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_level1");
      break;
    case ("2"):
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_level2");
      break;
    case ("3"):
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_level3");
      break;
    case ("5"):
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_level5");
      break;
    case ("s"):
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_levelS");
      break;
    default:
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_level1");
      y2milestone("[yast2-kdump] InitRunLevel: wrong value from /etc/sysconfig/kdump for option KDUMP_RUNLEVEL");
      break;
  }   
}

/**
  * Function stores option 
  * "The Run-level to Boot the Kdump Kernel"
  */

void StoreRunLevel(string key, map event) {
  string value = tostring(UI::QueryWidget(`id("RunLevel"), `Value));
  if (value == "run_level1") {
     Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"] = "1";
  } else if (value == "run_level2") {
     Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"] = "2";
  } else if (value == "run_level3") {
     Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"] = "3";
  } else if (value == "run_level5") {
     Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"] = "5";
  } else if (value == "run_levelS") {
     Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"] = "s";
  }


}
// helper list, each bit has its decimal representation
list <integer> bit_weight_row = [16, 8, 4, 2, 1];

/**
  * Function initializes option 
  * "Dump Level" - visualization in UI
  */

void SetDumpLevel (string bit_number) {
  integer counter = -1;
  foreach(string key, ["free_page", "user_data", "cache_private", "cache_page", "zero_page"],{
     counter = counter + 1;
     string one_bit = substring (bit_number, counter, 1);
     UI::ChangeWidget(`id(key), `Value, ((one_bit == "1") ? false:true));
  });

}

/**
  * Function initializes option 
  * "Dump Level"
  */


void InitDumpLevel (string key) {
  integer value =  tointeger(Kdump::KDUMP_SETTINGS["KDUMP_DUMPLEVEL"]:nil);
  string ret = "";
  foreach (integer try_i, bit_weight_row, {
    if ((value / try_i) > 0) {
       value = value % try_i;
       ret = ret + "1";
    } else {
       ret = ret + "0";
    }
  });
  
  //Popup::Message(ret);
  SetDumpLevel(ret);
}

/**
  * Function store option 
  * "Dump Level" - info from UI checkboxes
  * @result string binary code e.g. 11000 
  */

string GetDumpLevel () {
  string ret = "";
  foreach(string key, ["free_page", "user_data", "cache_private", "cache_page", "zero_page"],{
     if ( (boolean) UI::QueryWidget(`id(key), `Value))
        ret = ret + "0";
     else
        ret = ret + "1";
  });
  //Popup::Message(ret);
  return ret;
}

/**
  * Function stores option 
  * "Dump Level"
  */
void StoreDumpLevel(string key, map event) {
  
  string value = GetDumpLevel();
  integer counter = -1;
  integer int_value = 0;
  while (counter < 5) {
    counter = counter + 1;
    string one_bit = substring (value, counter, 1);
    if (one_bit == "1") {
       int_value = int_value + bit_weight_row[counter]:0;
    }
  };

  string ret =  tostring(int_value);
  Kdump::KDUMP_SETTINGS["KDUMP_DUMPLEVEL"] = ret;
  //Popup::Message(ret);
 

}


/**
  *  Hadle function for option 
  * "Dump Level"
  */

symbol HandleDumpLevel(string key, map event) {
  any ret = event["ID"]:nil;
  if (ret == "cache_private") {
     boolean value_cache_private = (boolean) UI::QueryWidget(`id("cache_private"), `Value);
     boolean value_cache_page = (boolean) UI::QueryWidget(`id("cache_page"), `Value);
     if ((value_cache_private) && (!value_cache_page))
        UI::ChangeWidget(`id("cache_page"), `Value, true);
  }

  if (ret == "cache_page") {
     boolean value_cache_private = (boolean) UI::QueryWidget(`id("cache_private"), `Value);
     boolean value_cache_page = (boolean) UI::QueryWidget(`id("cache_page"), `Value);
     if ((value_cache_private) && (!value_cache_page))
        UI::ChangeWidget(`id("cache_private"), `Value, false);

  }
  return nil;
}




/**
  * Function initializes option 
  * "RawDisk"
  */


void InitRawDisk (string key) {
  if (size(Kdump::uknown_fs_partitions)>0) {
     UI::ChangeWidget(`id("RawDisk"), `Items, Kdump::uknown_fs_partitions);
  } else {
     UI::ChangeWidget(`id("RawDisk"), `Enabled, false);
  } 


}


/**
  * Function initializes option 
  * "KdumpMemory"
  */


void InitKdumpMemory (string key) {
  if (Kdump::total_memory > 0) {
    UI::ChangeWidget(`id("total_memory"), `Value, tostring(Kdump::total_memory));
    UI::ChangeWidget(`id("memory_buffer"), `Value, 128);
    UI::ChangeWidget(`id("usable_memory"), `Value, 
      tostring((Kdump::total_memory - (integer) UI::QueryWidget(`id("memory_buffer"), `Value))));
  } else {
    UI::ChangeWidget(`id("total_memory"), `Value, "0");
    UI::ChangeWidget(`id("usable_memory"), `Value, "0");
    UI::ChangeWidget(`id("memory_buffer"), `Enabled, false);
  }

}

/**
  *  Hadle function for option 
  * "Dump Level"
  */

symbol HandleKdumpMemory (string key, map event) {
  any ret = event["ID"]:nil;
  if (ret == "memory_buffer") {
     integer value = (integer) UI::QueryWidget(`id("memory_buffer"), `Value);
     if (value > Kdump::total_memory) {
        UI::ChangeWidget(`id("memory_buffer"), `Value, Kdump::total_memory);
        UI::ChangeWidget(`id("usable_memory"), `Value, "0");
     } else {
        UI::ChangeWidget(`id("usable_memory"), `Value, 
         tostring((Kdump::total_memory - (integer) UI::QueryWidget(`id("memory_buffer"), `Value))));
     }
  }

}


/**
  * Function initializes option 
  * "Custom kdump Kernel"
  */


void InitInitrdKernel (string key) {
  UI::ChangeWidget(`id("InitrdKernel"), `Value, Kdump::KDUMP_SETTINGS["KDUMP_KERNELVER"]:nil);
}



/**
  * Function stores option 
  * "Custom kdump Kernel"
  */
void StoreInitrdKernel (string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_KERNELVER"] = tostring(UI::QueryWidget(`id("InitrdKernel"), `Value));
}


/**
  * Function initializes option 
  * "Dump Format"
  */

void InitDumpFormat (string key) {
  if (Kdump::KDUMP_SETTINGS["KDUMP_DUMPFORMAT"]:nil == "ELF")
     UI::ChangeWidget(`id("DumpFormat"), `Value, "elf_format");
  else
     UI::ChangeWidget(`id("DumpFormat"), `Value, "compressed_format");
}

/**
  * Function stores option 
  * "Dump Format"
  */

void StoreDumpFormat (string key, map event) {
  string value = tostring(UI::QueryWidget(`id("DumpFormat"), `Value));
  if (value == "elf_format")
     Kdump::KDUMP_SETTINGS["KDUMP_DUMPFORMAT"] = "ELF";
  else
     Kdump::KDUMP_SETTINGS["KDUMP_DUMPFORMAT"] = "compressed";
}

/**
  * Function initializes option 
  * "Enable Delete Old Dump Images"
  */

void InitEnableDeleteImages (string key) {
  UI::ChangeWidget(`id("EnableDeleteImages"), `Notify, true);
  if (Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"]:nil != "0") {
     UI::ChangeWidget(`id("NumberDumps"), `Enabled, true);
     UI::ChangeWidget(`id("EnableDeleteImages"), `Value, true);
  } else {
     UI::ChangeWidget(`id("EnableDeleteImages"), `Value, false);
     UI::ChangeWidget(`id("NumberDumps"), `Enabled, false); 
  }
}

/**
  *  Hadle function for option 
  * "Enable Delete Old Dump Images"
  */

symbol HandleEnableDeleteImages (string key, map event) {

  any ret = event["ID"]:nil;
  if (ret == "EnableDeleteImages") {
     boolean value = (boolean) UI::QueryWidget(`id("EnableDeleteImages"), `Value);
     if (!value) {
        UI::ChangeWidget(`id("NumberDumps"), `Value, tointeger("0"));
        UI::ChangeWidget(`id("NumberDumps"), `Enabled, false);	
     } else {
        UI::ChangeWidget(`id("NumberDumps"), `Value, 
            tointeger(Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"]:nil));
        UI::ChangeWidget(`id("NumberDumps"), `Enabled, true);	

     }
  }


}


/**
  * Function stores option 
  * "Enable Delete Old Dump Images"
  */

void StoreEnableDeleteImages (string key, map event) {
  boolean value = (boolean) UI::QueryWidget(`id("EnableDeleteImages"), `Value);
  if (!value) {
     Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"] = "0";
  } 



}





























}