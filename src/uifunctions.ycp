/**
 * File:	include/kdump/dialogs.ycp
 * Package:	Configuration of kdump
 * Summary:	Dialogs definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.com>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "kdump";

import "Popup";
import "Kdump";


    // EXAMPLE FUNCTIONS
/*
 *    void ExampleInit(string key) {
 *	y2milestone("Example Init");
 *    }
 *
 *    symbol ExampleHandle(string key, map event) {
 *	any ret = event["ID"]:nil;
 *	y2milestone("Example Handle");
 *	return nil;
 *    }
 *
 *    void ExampleStore(string key, map event) {
 *	any ret = event["ID"]:nil;
 *	y2milestone("Example Store");
 *    }
 *
 */


list local_partitions_list = [
  "/dev/sda2",
  "/dev/sda5",
  "/dev/sda7",
];


list raw_partitions_list = [
  "/dev/sda2",
  "/dev/sda5",
  "/dev/sda7",
];

boolean set_network = false;

boolean set_kdump_append = false;

term local_filesystem = `VBox(
  `Frame(_("Local Filesystem"),`HBox(`HSpacing(1),`VBox(
    `Left(`ComboBox(`id("local_partitions"), "&Select Partition", local_partitions_list)),
    `Left(`HBox(
      `TextEntry(`id("dir_save_image"), _("&Directory for Saving Dumps")),
      `VBox ( `Label(""),
      `PushButton ( `id ("select_dir_image"), `opt ( `hstretch ),  _("B&rowse"))
    )))
    
  )))
);


term raw_disk = `VBox(
  `Frame(_("Raw Disk"),`HBox(`HSpacing(1),`VBox(
    `Left(`ComboBox(`id("raw_partitions"), "&Select Partition", raw_partitions_list)),
    `Left(`HBox(
      `TextEntry(`id("dir_save_image"), _("&Directory for Saving Dumps")),
      `VBox ( `Label(""),
      `PushButton ( `id ("select_dir_image"), `opt ( `hstretch ),  _("B&rowse"))
    )))
  )))

);


term network = `VBox(
  `VSpacing(1),
  `Frame(_("Network"),`HBox(`HSpacing(1),
    `RadioButtonGroup(`id("NetworkRB"), `HBox(
       `Left(`RadioButton(`id("ftp"), `opt(`notify), "F&TP")),
       `Left(`RadioButton(`id("ssh"), `opt(`notify), "&SSH (scp)")),
       `Left(`RadioButton(`id("nfs"), `opt(`notify), "N&FS")),
       `Left(`RadioButton(`id("smb"), `opt(`notify), "C&IFS (SMB)"))
    ))
  ))

);


term ftp = `VBox(
  `Frame(_("FTP"),`HBox(`HSpacing(1),`VBox(
    `Left(`TextEntry(`id ("server"), _("Server Nam&e"))),
    `Left(`TextEntry( `id("dir"), _("&Directory on Server"))),
    `Left(`CheckBox(`id ("anonymous"), `opt (`notify),_("&Anonymous"))),
    // text entry
    `Left(`TextEntry(`id ("username"), _("&User Name"))),
    // password entry
    `Left(`Password(`id ("password"), _("&Password")))    
  )))

);

term ssh = `VBox(
  `Frame(_("SSH (scp)"),`HBox(`HSpacing(1),`VBox(
    `Left(`TextEntry(`id ("server"), _("Server Nam&e"))),
    `Left(`HBox(
      `Left(`TextEntry( `id("dir"), _("&Directory on Server"))),
       // text entry
      `Left(`TextEntry(`id ("port"), _("P&ort"))),
      `HStretch ()
    )),
    // text entry
    `Left(`TextEntry(`id ("username"), _("&User Name"))),
    // password entry
    `Left(`Password(`id ("password"), _("&Password")))    
  )))

);

term nfs = `VBox(
  `Frame(_("NFS"),`HBox(`HSpacing(1),`VBox(
    `Left(`TextEntry(`id ("server"), _("Server Nam&e"))),
     // text entry
    `Left(`TextEntry(`id ("share"), _("Sha&re"))),
    `Left(`TextEntry( `id("dir"), _("&Directory on Server")))  
  )))

);


term smb = `VBox(
  `Frame(_("CIFS (SMB)"),`HBox(`HSpacing(1),`VBox(
    `Left(`TextEntry(`id ("server"), _("Server Nam&e"))),
     // text entry
    `Left(`TextEntry(`id ("share"), _("Sha&re"))),
    `Left(`TextEntry( `id("dir"), _("&Directory on Server"))),
     // text entry
    `Left(`TextEntry(`id ("username"), _("&User Name"))),
    // password entry
    `Left(`Password(`id ("password"), _("&Password")))
  )))

);



symbol HandleTargetKdump (string key, map event) {
  any radiobutton = UI::QueryWidget(`id("DumpTarget"), `CurrentButton);
  
  if (radiobutton == "local_filesystem") {
     UI::ReplaceWidget (`id ("Network"), `Empty());
     UI::ReplaceWidget (`id ("Targets"), local_filesystem);
     set_network = false; 
  } else if (radiobutton == "raw_disk") {
     UI::ReplaceWidget (`id ("Network"), `Empty());
     UI::ReplaceWidget (`id ("Targets"), raw_disk);
     set_network = false;
  } else if (radiobutton == "network") {    
     UI::ReplaceWidget (`id ("Targets"), `Empty());
     if (!set_network)
        UI::ReplaceWidget (`id ("Network"), network);
     set_network = true;
      any net = UI::QueryWidget(`id("NetworkRB"), `CurrentButton);
     if (net == "ftp") {
        UI::ReplaceWidget (`id ("Targets"), ftp);
     } else if (net == "ssh") {
        UI::ReplaceWidget (`id ("Targets"), ssh);
     } else if (net == "nfs") {
        UI::ReplaceWidget (`id ("Targets"), nfs);
     } else if (net == "smb") {
        UI::ReplaceWidget (`id ("Targets"), smb);
     }
  }
  return nil;

}

/**
  * Function initializes option "Kdump Command Line"
  * or "Kdump Command Line Append"
  */

void InitSwitchKdumpComLine (string key) {
  string value = "";
  //Popup::Message("InitSwitchKdumpComLine");
  if (!set_kdump_append) {
     UI::ChangeWidget(`id("KdumpCommandLine"), `Label, "Kdump Co&mmand Line");
     UI::ChangeWidget(`id("enable_append"), `Value, false);
     value = Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"]:nil;
     UI::ChangeWidget(`id("KdumpCommandLine"), `Value, ((value == nil) ? "":value));
  } else {
     UI::ChangeWidget(`id("enable_append"), `Value, true);
     UI::ChangeWidget(`id("KdumpCommandLine"), `Label, "Kdump Co&mmand Line Append");
     value = Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"]:nil;
     UI::ChangeWidget(`id("KdumpCommandLine"), `Value, ((value == nil) ? "":value));
  }  
}



/**
  * Function handles switching between "Kdump Command Line"
  * and "Kdump Command Line Append"
  * also saves values for both options from config file
  */
symbol HandleSwitchKdumpComLine (string key, map event) {
  boolean checkbox = (boolean) UI::QueryWidget(`id("enable_append"), `Value);
  string value = "";
  //Popup::Message("HandleSwitchKdumpComLine");
  if ((checkbox) && (!set_kdump_append)) {
     set_kdump_append = true;
     Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"] = tostring(UI::QueryWidget(`id("KdumpCommandLine"), `Value));
     UI::ChangeWidget(`id("KdumpCommandLine"), `Label, "Kdump Co&mmand Line Append");
     value = Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"]:nil;
     UI::ChangeWidget(`id("KdumpCommandLine"), `Value, ((value == nil) ? "":value));
  } else if ((!checkbox)&&(set_kdump_append)){
     set_kdump_append = false;
     Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"] = tostring(UI::QueryWidget(`id("KdumpCommandLine"), `Value));
     UI::ChangeWidget(`id("KdumpCommandLine"), `Label, "Kdump Co&mmand Line");
     value = Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"]:nil;
     UI::ChangeWidget(`id("KdumpCommandLine"), `Value, ((value == nil) ? "":value));
  }

  return nil;
}


/**
  * Function stores option "Kdump Command Line"
  * or "Kdump Command Line Append"
  */
void StoreSwitchKdumpComLine (string key, map event) {
  //Popup::Message("StoreSwitchKdumpComLine");
  if (!set_kdump_append) {    
     Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"] = tostring(UI::QueryWidget(`id("KdumpCommandLine"), `Value));
  } else {
     Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"] = tostring(UI::QueryWidget(`id("KdumpCommandLine"), `Value));
  }
}


/**
  * Function initializes option "Number of Old Dumps"
  */
void InitNumberDumps (string key) {
  UI::ChangeWidget(`id("NumberDumps"), `Value, tointeger(Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"]:nil));  
}

/**
  * Function stores option "Number of Old Dumps"
  */
void StoreNumberDumps(string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"] = tostring(UI::QueryWidget(`id("NumberDumps"), `Value));
}

/**
  * Function initializes option 
  * "Enable Immediate Reboot After Saving the Core"
  */

void InitEnableReboot (string key) {
  UI::ChangeWidget(`id("EnableReboot"), `Value, ((Kdump::KDUMP_SETTINGS["KDUMP_IMMEDIATE_REBOOT"]:nil == "yes") ? true:false));  
}

/**
  * Function stores option 
  * "Enable Immediate Reboot After Saving the Core"
  */

void StoreEnableReboot(string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_IMMEDIATE_REBOOT"] = (((boolean) UI::QueryWidget(`id("EnableReboot"), `Value)) ? "yes":"no");
}



/**
  * Function initializes option 
  * "The Run-level to Boot the Kdump Kernel"
  */

void InitRunLevel (string key) {
  string value = tostring(Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"]:nil);
  switch (value) {
    case ("1"):
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_level1");
      break;
    case ("2"):
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_level2");
      break;
    case ("3"):
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_level3");
      break;
    case ("5"):
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_level5");
      break;
    case ("s"):
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_levelS");
      break;
    default:
      UI::ChangeWidget(`id("RunLevel"), `Value, "run_level1");
      y2milestone("[yast2-kdump] InitRunLevel: wrong value from /etc/sysconfig/kdump for option KDUMP_RUNLEVEL");
      break;
  }   
}

/**
  * Function stores option 
  * "The Run-level to Boot the Kdump Kernel"
  */

void StoreRunLevel(string key, map event) {
  string value = tostring(UI::QueryWidget(`id("RunLevel"), `Value));
  if (value == "run_level1") {
     Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"] = "1";
  } else if (value == "run_level2") {
     Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"] = "2";
  } else if (value == "run_level3") {
     Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"] = "3";
  } else if (value == "run_level5") {
     Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"] = "5";
  } else if (value == "run_levelS") {
     Kdump::KDUMP_SETTINGS["KDUMP_RUNLEVEL"] = "s";
  }


}
// helper list, each bit has its decimal representation
list <integer> bit_weight_row = [16, 8, 4, 2, 1];

/**
  * Function initializes option 
  * "Dump Level" - visualization in UI
  */

void SetDumpLevel (string bit_number) {
  integer counter = -1;
  foreach(string key, ["free_page", "user_data", "cache_private", "cache_page", "zero_page"],{
     counter = counter + 1;
     string one_bit = substring (bit_number, counter, 1);
     UI::ChangeWidget(`id(key), `Value, ((one_bit == "1") ? false:true));
  });

}

/**
  * Function initializes option 
  * "Dump Level"
  */


void InitDumpLevel (string key) {
  integer value =  tointeger(Kdump::KDUMP_SETTINGS["KDUMP_DUMPLEVEL"]:nil);
  string ret = "";
  foreach (integer try_i, bit_weight_row, {
    if ((value / try_i) > 0) {
       value = value % try_i;
       ret = ret + "1";
    } else {
       ret = ret + "0";
    }
  });
  
  //Popup::Message(ret);
  SetDumpLevel(ret);
}

/**
  * Function store option 
  * "Dump Level" - info from UI checkboxes
  * @result string binary code e.g. 11000 
  */

string GetDumpLevel () {
  string ret = "";
  foreach(string key, ["free_page", "user_data", "cache_private", "cache_page", "zero_page"],{
     if ( (boolean) UI::QueryWidget(`id(key), `Value))
        ret = ret + "0";
     else
        ret = ret + "1";
  });
  //Popup::Message(ret);
  return ret;
}

/**
  * Function stores option 
  * "Dump Level"
  */
void StoreDumpLevel(string key, map event) {
  
  string value = GetDumpLevel();
  integer counter = -1;
  integer int_value = 0;
  while (counter < 5) {
    counter = counter + 1;
    string one_bit = substring (value, counter, 1);
    if (one_bit == "1") {
       int_value = int_value + bit_weight_row[counter]:0;
    }
  };

  string ret =  tostring(int_value);
  Kdump::KDUMP_SETTINGS["KDUMP_DUMPLEVEL"] = ret;
  //Popup::Message(ret);
 

}


/**
  *  Hadle function for option 
  * "Dump Level"
  */

symbol HandleDumpLevel(string key, map event) {
  any ret = event["ID"]:nil;
  if (ret == "cache_private") {
     boolean value_cache_private = (boolean) UI::QueryWidget(`id("cache_private"), `Value);
     boolean value_cache_page = (boolean) UI::QueryWidget(`id("cache_page"), `Value);
     if ((value_cache_private) && (!value_cache_page))
        UI::ChangeWidget(`id("cache_page"), `Value, true);
  }

  if (ret == "cache_page") {
     boolean value_cache_private = (boolean) UI::QueryWidget(`id("cache_private"), `Value);
     boolean value_cache_page = (boolean) UI::QueryWidget(`id("cache_page"), `Value);
     if ((value_cache_private) && (!value_cache_page))
        UI::ChangeWidget(`id("cache_private"), `Value, false);

  }
  return nil;
}




















}