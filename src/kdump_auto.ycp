/**
 * File:
 *      kdump_auto.ycp
 *
 * Module:
 *      Kdump installation and configuration
 *
 * Summary:
 *      Kdump autoinstallation preparation
 *
 * Authors:
 *      Jozef Uhliarik <juhliarik@suse.cz>
 *
 *
 */
{
    textdomain "kdump";

    y2milestone("----------------------------------------");
    y2milestone("kdump auto started");

    import "Kdump";
    import "Mode";

    include "kdump/wizards.ycp";

    boolean progress_orig = Progress::set (false);


    any ret = nil;
    string func = "";
    map param = $[];

    /* Check arguments */
    if(size((list)WFM::Args()) > 0 && is(WFM::Args(0), string)) {
	func = (string)WFM::Args(0);
	if(size((list)WFM::Args()) > 1 && is(WFM::Args(1), map))
	    param = (map)WFM::Args(1);
    }
    y2debug("func=%1", func);
    y2debug("param=%1", param);

    if(func == "Import")
    {
	ret = Kdump::Import(AI2Export ((map<string,any>)param));
    }
    /**
      * Create a summary
      * return string
      */
    else if(func == "Summary") {
	ret = "<UL>"
            + mergestring (maplist (string l, Kdump::Summary(),
		``("<LI>" + l)),
		"\n")
            + "</UL>";
    }
    /**
      * did configuration changed
      * return boolean
      */
    else if (func == "GetModified") {
	ret =  Kdump::GetModified();
    }
    /**
     * set configuration as changed
     * return boolean
     */
    else if (func == "SetModified") {
        Kdump::SetModified();
        ret = true;
    }
    /**
      * Reset configuration
      * return map or list
      */
    else if (func == "Reset") {
	Kdump::Reset();
	ret =  ($[]);
    }
    /**
      * Change configuration
      * return symbol (i.e. `finish || `accept || `next || `cancel || `abort)
      */
    else if (func == "Change") {
	ret = KdumpAutoSequence ();
	return ret;
    }
    /**
      * Return configuration data
      * return map or list
      */
    else if (func == "Export") {
	ret = Export2AI ((map<string,any>)Kdump::Export());
    }
    /**
      * Write configuration data
      * return boolean
      */
    else if (func == "Write") {
	ret = Kdump::Write();
    }
    else if (func == "Read") {
	ret = Kdump::Read();
    }
    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	ret =  false;
    }
    Progress::set (progress_orig);

    y2debug("ret=%1", ret);
    y2milestone("kdump_auto finished");
    y2milestone("----------------------------------------");

    return ret;

/* EOF */

}
