/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/Kdump.ycp
 * Package:	Configuration of kdump
 * Summary:	Kdump settings, input and output functions
 * Authors:	Jozef Uhliarik <juhliarik@suse.com>
 *
 * $Id: Kdump.ycp 27914 2006-02-13 14:32:08Z locilka $
 *
 * Representation of the configuration of kdump.
 * Input and output routines.
 */

{

module "Kdump";
textdomain "kdump";

import "Progress";
import "Report";
import "Summary";
import "Message";

/**
 * Prototypes
 */
global boolean Modified();

/**
 * Data was modified?
 */
global boolean modified = false;

/**
 */
global boolean proposal_valid = false;

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

/**
 * Abort function
 * return boolean return true if abort
 */
global boolean() AbortFunction = Modified;

/**
 * map of deafult values for options in UI
 *  
 * global map <string, string >
 */

global map <string, string > DEFAULT_CONFIG = $[
     "KDUMP_KERNELVER"              : "kdump",
     "KDUMP_COMMANDLINE"            : "",
     "KDUMP_COMMANDLINE_APPEND"     : "",  
     "KEXEC_OPTIONS"                : "",  
     "KDUMP_RUNLEVEL"               : "1",
     "KDUMP_IMMEDIATE_REBOOT"       : "yes",
     "KDUMP_TRANSFER"               : "",
     "KDUMP_SAVEDIR"      	    : "/var/log/dump",
     "KDUMP_KEEP_OLD_DUMPS"         : "5",
     "KDUMP_FREE_DISK_SIZE"    	    : "64",
     "KDUMP_DUMPDEV"           	    : "",
     "KDUMP_VERBOSE"      	    : "3",
];

/**
 * map <string, string > of kdump settings
 *    
 */
global map <string, string > KDUMP_SETTINGS = $[];

/**
 * time for progress bar
 *    
 */
integer sl = 500;

/**
 * Abort function
 * @return boolean return true if abort
 */
global define boolean Abort() ``{
    if(AbortFunction != nil)
    {
	return AbortFunction () == true;
    }
    return false;
}

/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
    return modified;
}


/**
 * Read current kdump configuration
 *
 *  @return boolean successfull
 */
boolean ReadKdumpSettings () {
    KDUMP_SETTINGS = DEFAULT_CONFIG;
    foreach (string key,  SCR::Dir(.sysconfig.kdump), {
	string val = (string) SCR::Read(add(.sysconfig.kdump, key));
        if (val != nil) KDUMP_SETTINGS[key] = val;
    });
    y2milestone("-------------KDUMP_SETTINGS-------------------");  
    y2milestone("kdump configuration has been read: %1", KDUMP_SETTINGS);
    y2milestone("---------------------------------------------");


    return true;
}


/**
 * Read all kdump settings
 * @return true on success
 */
global boolean Read() {

    /* Kdump read dialog caption */
    string caption = _("Initializing kdump Configuration");
    integer steps = 2;
    sleep(sl);

    Progress::New( caption, " ", steps, [
	    /* Progress stage 1/2 */
	    _("Read the config file"),
	    /* Progress stage 2/2 */
	    _("Read another settings"),
	], [
	    /* Progress step 1/2 */
	    _("Reading the config file..."),
	    /* Progress finished 2/2*/
	    _("Finished")
	],
	""
    );

    // read database
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(!ReadKdumpSettings ()) Report::Error(_("Cannot read config file /etc/sysconfig/kdump"));
    sleep(sl);

    // read another database
    if(Abort()) return false;
    Progress::NextStep();
    /* Error message */
    if(false) Report::Error(_("Cannot read another settings."));
    sleep(sl);

    if(Abort()) return false;
    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    if(Abort()) return false;
    modified = false;
    return true;
}

/**
 * Write all kdump settings
 * @return true on success
 */
global boolean Write() {

    /* Kdump read dialog caption */
    string caption = _("Saving kdump Configuration");

    // TODO FIXME And set the right number of stages
    integer steps = 2;

    sleep(sl);

    // TODO FIXME Names of real stages
    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/2 */
	    _("Write the settings"),
	    /* Progress stage 2/2 */
	    _("Run SuSEconfig")
	], [
	    /* Progress step 1/2 */
	    _("Writing the settings..."),
	    /* Progress step 2/2 */
	    _("Running SuSEconfig..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // write settings
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(false) Report::Error (_("Cannot write settings."));
    sleep(sl);

    // run SuSEconfig
    if(Abort()) return false;
    Progress::NextStage ();
    /* Error message */
    if(false) Report::Error (Message::SuSEConfigFailed());
    sleep(sl);

    if(Abort()) return false;
    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Get all kdump settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {
    // TODO FIXME: your code here (fill the above mentioned variables)...
    return true;
}

/**
 * Dump the kdump settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export () {
    // TODO FIXME: your code here (return the above mentioned variables)...
    return $[];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global list Summary() {
    // TODO FIXME: your code here...
    /* Configuration summary text for autoyast */
    return [ _("Configuration summary..."), [] ];
}

/**
 * Create an overview table with all configured cards
 * @return table items
 */
global list Overview() {
    // TODO FIXME: your code here...
    return [];
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages() {
    // TODO FIXME: your code here...
    return $[ "install":[], "remove":[] ];
}

/* EOF */
}
