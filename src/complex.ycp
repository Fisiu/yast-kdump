/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/kdump/complex.ycp
 * Package:	Configuration of kdump
 * Summary:	Dialogs definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.com>
 *
 * $Id: complex.ycp 29363 2006-03-24 08:20:43Z mzugec $
 */

{

textdomain "kdump";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "Kdump";
import "Package";

include "kdump/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return Kdump::Modified();
}

boolean ReallyAbort() {
    return !Kdump::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
  boolean kexec_installed = false;
  boolean kdump_installed = false;
  boolean kexec_available = false;
  boolean kdump_available = false;
  list <string> package_list = [];

  Wizard::RestoreHelp(HELPS["read"]:"");
  // Kdump::AbortFunction = PollAbort;
  if (!Confirm::MustBeRoot()) return `abort;
     
  //checking of installation packages
  if (Package::Installed("kexec-tools")) {
     kexec_installed = true;
  }

  if (Package::Installed("kernel-kdump")) {
      kdump_installed =true;
  }
  //checking if packages are available
  if ((!kexec_installed) || (!kdump_installed)) {
     if (!kexec_installed)
        kexec_available = Package::Available("kexec-tools");
     if (!kdump_installed)
        kdump_available = Package::Available("kernel-kdump");

     if ((!kexec_installed) &&(!kexec_available)) {
        Popup::Error("Package for kexec-tools is not available.");
        y2error("[kdump] (ReadDialog ()) Packages for kexec-tools is not available.");
        return `abort;
     }
     
     if ((!kdump_installed) &&(!kdump_available)) {
        Popup::Error("Package for kernel-kdump is not available.");
        y2error("[kdump] (ReadDialog ()) Packages for kernel-kdump is not available.");
        return `abort;
     }
     
     //add packages for installation
     if (!kexec_installed) 
        package_list = add(package_list, "kexec-tools");
   
     if (!kdump_installed) 
        package_list = add(package_list, "kernel-kdump");
     
     //install packages
     if (!Package::DoInstall(package_list)) {
        Popup::Error("Installation failed!");
        y2error("[kdump] Installation of package list %1 failed", package_list);
	return `abort;
     }

  }



    boolean ret = Kdump::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    // Kdump::AbortFunction = PollAbort;
    boolean ret = Kdump::Write();
    return ret ? `next : `abort;
}

/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {

    /* Kdump summary dialog caption */
    string caption = _("Kdump Configuration");

    /* FIXME */
    list summary = Kdump::Summary();
    list unconfigured = summary[1]:[];
    string configured = summary[0]:"";

    /* Frame label */
    term contents = Wizard_hw::DetectedContent(_("Kdump to Configure"),
	    unconfigured, false, configured);

    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* overview dialog */
        else if(ret == `edit_button) {
            ret = `overview;
            break;
        }
        /* configure the selected device */
        else if(ret == `configure_button) {
	    // TODO FIXME: check for change of the configuration
            any selected = UI::QueryWidget(`id(`detected_selbox), `CurrentItem);
            if(selected == `other) {
                ret = `other;
            }
            else {
                ret = `configure;
            }
            break;
        }
        else if(ret == `next) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
any OverviewDialog() {

    /* Kdump overview dialog caption */
    string caption = _("Kdump Overview");

    list overview = Kdump::Overview();

    /* FIXME table header */
    term contents = Wizard_hw::ConfiguredContent(
	/* Table header */
	`header(_("Number"), _("Kdump")),
	overview, nil, nil, nil, nil );

    contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

    Wizard::SetContentsButtons(caption, contents, HELPS["overview"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* add */
        else if(ret == `add_button) {
	    /* FIXME */
            ret = `add;
            break;
        }
        /* edit */
        else if(ret == `edit_button) {
	    /* FIXME */
            ret = `edit;
            break;
        }
        /* delete */
        else if(ret == `delete_button) {
	    /* FIXME */
            continue;
        }
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
