/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/kdump/complex.ycp
 * Package:	Configuration of kdump
 * Summary:	Dialogs definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.com>
 *
 * $Id: complex.ycp 29363 2006-03-24 08:20:43Z mzugec $
 */

{

textdomain "kdump";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "Kdump";
import "Package";
import "Arch";
import "CommandLine";
import "Mode";
import "Message";
import "PackageSystem";

include "kdump/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return Kdump::Modified();
}

boolean ReallyAbort() {
    return !Kdump::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
  boolean kexec_installed = false;
  boolean kdump_installed = false;
  boolean kernel_kdump_installed = false;
  boolean kexec_available = false;
  boolean kdump_available = false;
  boolean kernel_kdump_available = false;
  list <string> package_list = [];
  string kernel_kdump_name = "kernel-kdump";

  Wizard::RestoreHelp(HELPS["read"]:"");
  // Kdump::AbortFunction = PollAbort;
  if (!Confirm::MustBeRoot()) return `abort;
     
  //checking of installation packages
  if (Package::Installed("kexec-tools")) {
     kexec_installed = true;
  }

  // added patch from bwalle for installing kernel-kdumppae if kernel-bigsmp is used

  // when we use the bigsmp kernel on i386, we need kernel-kdumppae
  if (Arch::i386()) {
     // reading version of kernel
     string command = "uname -r";
     map version = (map)SCR::Execute (.target.bash_output, command);
     y2milestone("[kdump] (ReadDialog) command read kernel version:  %1  output: %2",command, version);
     boolean kernel_bigsmp = false;  
     if (version["exit"]:nil ==  0)
     {
	 if (find(version["stdout"]:"", "bigsmp") != -1)
             kernel_bigsmp = true; 
     } else {
	 y2error("Reading version of kernel fault");
         kernel_bigsmp = false;
     }
     if (kernel_bigsmp) {
        if (Package::Available("kernel-kdumppae") || Package::Installed("kernel-kdumppae"))
           kernel_kdump_name = "kernel-kdumppae";
       else
           y2milestone ("kernel-kdumppae not available. Falling back to kernel-kdump.");
     }
  }

  if (!Arch::ia64()) { 
     if (Package::Installed(kernel_kdump_name))
        kernel_kdump_installed = true;
     else
        kernel_kdump_installed = false;
  } else {
     kernel_kdump_installed = true;
  }

  string kdump ="";
  
  //only ppc64 includes package kernel-kdump
  //others include kdump-helper and kexec-tools depend on it
  //it mean that it is not important check for available kdump-helper

  
  //if (Arch::ppc64()) {
  //   kdump = "kernel-kdump";
  //} else {
  //   kdump = "kdump-helpers";
  //}

  //the patch for openSUSE 11, kdump-helpers was rename to kdump package
  //it valid for all architectures bug#347241
  kdump = "kdump";

  if (Package::Installed(kdump)) {
      kdump_installed =true;
  }

  //checking if packages are available
  if ((!kexec_installed) || (!kdump_installed) || (!kernel_kdump_installed)) {
     if (!kexec_installed)
        kexec_available = Package::Available("kexec-tools");

     if (!kdump_installed) {
        //if (Arch::ppc64())
        //   kdump_available = Package::Available(kdump);
        //else
        //   kdump_available = true;
        kdump_available = Package::Available(kdump);
     }

     if (!kernel_kdump_installed)
        kernel_kdump_available = Package::Available(kernel_kdump_name);

     if ((!kexec_installed) && (!kexec_available)) {
        if (!Mode::commandline()) {
           Popup::Error(_("Package for kexec-tools is not available."));
        } else {
           CommandLine::Error(_("Package for kexec-tools is not available."));
        }
        y2error("[kdump] (ReadDialog ()) Packages for kexec-tools is not available.");
        return `abort;
     }
     
     if ((!kdump_installed) && (!kdump_available)) {
        if (!Mode::commandline()) {
           Popup::Error(_("Package for kdump is not available."));
        } else {
           CommandLine::Error(_("Package for kdump is not available."));
        }
        y2error("[kdump] (ReadDialog ()) Packages for %1 is not available.",kdump);
        return `abort;
     }
     
     if ((!kernel_kdump_installed) && (!kernel_kdump_available)) {
        if (!Mode::commandline()) {
           Popup::Error(_("Package for kernel-kdump is not available."));
        } else {
           CommandLine::Error(_("Package for kernel-kdump is not available."));
        }
        y2error("[kdump] (ReadDialog ()) Packages for kernel-kdump is not available.");
        return `abort;
     }    


     //add packages for installation
     if (!kexec_installed) 
        package_list = add(package_list, "kexec-tools");
   
     if (!kdump_installed)
        package_list = add(package_list, kdump);
     
     if (!kernel_kdump_installed)
        package_list = add(package_list, kernel_kdump_name);

     //install packages       
     if (! PackageSystem::CheckAndInstallPackages(package_list)) {

       
        if (!Mode::commandline()) {
           Popup::Error(Message::CannotContinueWithoutPackagesInstalled());
        } else {
           CommandLine::Error(Message::CannotContinueWithoutPackagesInstalled());
        }
        y2error("[kdump] Installation of package list %1 failed or aborted", package_list);
	return `abort;
     }

  }



    boolean ret = Kdump::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    // Kdump::AbortFunction = PollAbort;
    boolean ret = Kdump::Write();
    return ret ? `next : `abort;
}

/* EOF */
}
